/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitmap.transformer;

import javax.imageio.ImageIO;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Path;

    public class Bitmap {
        private BufferedImage bitmap;
        // These are not final because there may be a transformation in the future to alter them (such as resizing)
        private int width;
        private int height;

        public Bitmap(Path filePath) throws IOException {
            try{
                this.bitmap = ImageIO.read(filePath.toFile());
                this.width = bitmap.getWidth();
                this.height = bitmap.getHeight();
            } catch (IOException ioe){
//                ioe.printStackTrace();
            }
        }

        public void flipHorizontally() {
            // Iterate through half the width of the image and flip the RGB values of the corresponding pixel mirrored at the halfway mark

            for (int row = 0; row < this.height; row++){
                for(int column = 0; column < (this.width + 1) / 2; column++){
                    int mirroredPixel = bitmap.getRGB(width - column - 1, row);
                    int currentPixel = bitmap.getRGB(column, row);

                    bitmap.setRGB(column, row, mirroredPixel);
                    bitmap.setRGB(width - column - 1, row, currentPixel);
                }
            }
        }

        public void toGrayscale() {
            // Iterate over each pixel and calculate their average value, then update that pixel's color
            for (int row = 0; row < this.height; row++){
                for(int column = 0; column < this.width; column++){
                    int pixel = bitmap.getRGB(column, row);
                    Color color = new Color(pixel);

                    int red = color.getRed();
                    int green = color.getGreen();
                    int blue = color.getBlue();
                    int avg = (red + green + blue)/3;

                    Color newColor = new Color(avg, avg, avg);
                    bitmap.setRGB(column, row, newColor.getRGB());
                }
            }
        }

        public void invertColors() {
            // Iterate over each pixel and calculate their inverse, i.e., 255 - color, then update that pixel's color
            for (int row = 0; row < this.height; row++){
                for(int column = 0; column < this.width; column++){
                    int pixel = bitmap.getRGB(column, row);
                    Color color = new Color(pixel);

                    int invertRed = 255 - color.getRed();
                    int invertGreen = 255 - color.getGreen();
                    int invertBlue = 255 - color.getBlue();

                    Color newColor = new Color(invertRed, invertGreen, invertBlue);
                    bitmap.setRGB(column, row, newColor.getRGB());
                }
            }
        }
        public void save(Path filePath) throws IOException {
            try{
                 ImageIO.write(this.bitmap, "bmp", filePath.toFile());
            } catch (IOException ioe){
                ioe.printStackTrace();
            }
        }
    }
